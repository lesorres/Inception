version: '3'
services:
  nginx:
      image: nginx:image
      build:
          context: ./requirements/nginx
      container_name: nginx
      networks:
          - inception_network
      volumes:
        - wordpress:/var/www/wordpress
      depends_on:
          - wordpress
      ports:
          - 443:443
      restart: always

  mariadb:
      image: mariadb:image
      build:
          context: ./requirements/mariadb
      container_name: mariadb
      networks:
          - inception_network
      volumes:
        - database:/var/lib/mysql
      env_file:
        - .env
      restart: always

  wordpress:
      image: wordpress:image
      build:
          context: ./requirements/wordpress
      container_name: wordpress
      networks:
        - inception_network
      volumes:
        - wordpress:/var/www/wordpress
      depends_on:
        - mariadb
      env_file:
        - .env 
      restart: always

volumes:
    database:
        name: database
        driver: local
        driver_opts:
            type: none
            o: bind
            device: /home/${USER}/data/database
    wordpress:
        name: wordpress
        driver: local
        driver_opts:
            type: none
            o: bind
            device: /home/${USER}/data/wordpress

networks:
    inception_network:
        driver: bridge

# **************************************************************************** #
# about latest tag and image: <service>:<tag> necessity:                       #
# https://vsupalov.com/docker-latest-tag/                                      #
# https://stackoverflow.com/questions/33816456/how-to-tag-docker-image-with-doc#
# ker-compose                                                                  #
# **************************************************************************** #
# bridge: The default network driver. If you don’t specify a driver, this is   #
#  the type of network you are creating. Bridge networks are usually used when #
# your applications run in standalone containers that need to communicate.     #
# https://docs.docker.com/network/                                             #
# **************************************************************************** #
# The type of network a container uses, whether it is a bridge, an overlay,    #
# a macvlan network, or a custom network plugin, is transparent from within    #
# the container. From the container’s point of view, it has a network          #
# interface with an IP address, a gateway, a routing table, DNS services,      #
# and other networking details (assuming the container is not using the none   #
# network driver).                                                             #
# By default, the container is assigned an IP address for every Docker network #
# it connects to. The IP address is assigned from the pool assigned to the     #
# network, so the Docker daemon effectively acts as a DHCP server for each     #
# container. Each network also has a default subnet mask and gateway.          #
# https://docs.docker.com/config/containers/container-networking/              #
# **************************************************************************** #